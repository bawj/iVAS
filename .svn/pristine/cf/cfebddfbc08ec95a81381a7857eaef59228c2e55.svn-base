package com.yn.electricity.util;

import com.yn.electricity.dao.AlarmConfigurationDAO;
import com.yn.electricity.entity.AlarmConfigurationEntity;
import com.yn.electricity.mapper.AlarmConfigurationMapper;
import com.yn.electricity.mapper.UserMapper;
import com.yn.electricity.qto.UserDTO;
import com.yn.electricity.redis.RedisUtil;
import com.yn.electricity.result.UserResult;
import com.yn.electricity.utils.BizBusinessUtils;
import com.yn.electricity.vo.RoleMenuVo;
import com.yn.electricity.vo.UserRoleMenuVo;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.util.List;

/**
 * @author admin
 * Date 2021/3/17 11:12
 * Description 获取redis 信息 util
 **/
@Component
public class RedisInfoUtil {

    @Resource
    private RedisUtil redisUtil;
    @Resource
    private UserMapper userMapper;
    @Resource
    private AlarmConfigurationMapper alarmConfigurationMapper;

    /**
     * 获取用户信息
     *
     * @return 用户信息
     */
    public UserResult getUserResult() {
        Object obj = redisUtil.get(RedisKey.USER_INFO + SecurityUtils.getSubject().getPrincipal());
        if (null == obj) {
            checkLogStatus();
            obj = redisUtil.get(RedisKey.USER_INFO + SecurityUtils.getSubject().getPrincipal());
        }
        return (UserResult) obj;
    }

    /**
     * 获取用户操作权限
     *
     * @return
     */
    public List<RoleMenuVo> getPermission() {
        Object obj = redisUtil.get(RedisKey.ROLE_MENU_INFO + SecurityUtils.getSubject().getPrincipal());
        if (null == obj) {
            checkLogStatus();
            obj = redisUtil.get(RedisKey.ROLE_MENU_INFO + SecurityUtils.getSubject().getPrincipal());
        }
        return (List<RoleMenuVo>) obj;
    }

    /**
     * 登陆信息提交到redis
     *
     * @param user
     * @param loginName
     */
    public void commit(UserRoleMenuVo user, String loginName) {
        redisUtil.set(RedisKey.ROLE_MENU_INFO + loginName, user.getRoleMenuVoList());
        UserResult userDao = new UserResult();
        userDao.setUserName(user.getUserName());
        userDao.setAvailable(user.getAvailable());
        userDao.setNickname(user.getNickname());
        userDao.setCompanyCode(user.getCompanyCode());
        userDao.setDepCode(user.getDepCode());
        userDao.setPhone(user.getPhone());
        userDao.setSex(user.getSex());
        userDao.setEmail(user.getEMail());
        userDao.setId(user.getId());
        userDao.setIpId(user.getIpId());
        redisUtil.set(RedisKey.USER_INFO + loginName, userDao);
    }

    /**
     * 检查登陆
     */
    public void checkLogStatus() {
        Subject subject = SecurityUtils.getSubject();
        if (!subject.isAuthenticated()) {
            BizBusinessUtils.bizBusinessException("用户未登陆");
        }
        String loginName = String.valueOf(subject.getPrincipal());
        UserDTO userDTO = new UserDTO();
        if (loginName.contains("@")) {
            userDTO.setEMail(loginName);
        } else {
            userDTO.setPhone(loginName);
        }
        UserRoleMenuVo user = userMapper.selectByLoginName(userDTO);
        commit(user, loginName);
    }


    /**
     * 保存配置信息到redis
     * @param devId       设备id
     * @param alarmTypeId 报警类型
     */
    public void setAlarmConfigurationVO(Integer devId, Integer alarmTypeId) {
        AlarmConfigurationEntity alarmConfiguration = alarmConfigurationMapper.findConfigurationByDevIdAndAlarmTypeId(devId , alarmTypeId);
        if (alarmConfiguration == null){
            alarmConfiguration = new AlarmConfigurationEntity();
        }
        redisUtil.set(RedisKey.CONFIGURATION_ALARM + devId + alarmTypeId , alarmConfiguration);
    }

    /**
     * 从redis中读取配置信息 如果redis中不存在则查询数据库
     * @param devId       设备id
     * @param alarmTypeId 报警类型
     * @return AlarmConfigurationVO
     */
    public AlarmConfigurationEntity getAlarmConfigurationEntity(Integer devId, Integer alarmTypeId) {
        Object o = redisUtil.get(RedisKey.CONFIGURATION_ALARM + devId + alarmTypeId);
        if (o == null) {
            return new AlarmConfigurationEntity();
        }
        return (AlarmConfigurationEntity) o;
    }


}
